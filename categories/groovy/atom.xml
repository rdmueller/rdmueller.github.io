<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[R.D.Müller - Bits from my Brain]]></title><link href="/categories/groovy/atom.xml" rel="self"/><link href="/"/><updated>2016-06-26T18:03:39+02:00</updated><id>/</id><author><name><![CDATA[Ralf D. Müller]]></name><email><![CDATA[ralf.d.mueller@gmail.com]]></email></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Groovy is Java is Groovy...]]></title><link href="/blog/2016/05/09/groovy-is-java-is-groovy/"/><updated>2016-06-27T20:29:47+02:00</updated><id>/blog/2016/05/09/groovy-is-java-is-groovy/</id><content type="html"><![CDATA[<p>There still seem to be some Java-Developers who are afraid of
mixing their Java codebase with the power of Groovy.<!--more--></p>
<p>Some time ago, it was a valid argument that the dependency
to the groovy-all.jar would blow up the generated application,
but today many frameworks like Jasper-Reports, Apache-Camel and others might already add the
groovy-all.jar to the class path of your application. So there is no reason anymore
not to use Groovy in your project.</p>
<p>The following snippets will show you how easy it is to combine Java und Groovy, because Groovy is Java and Java is Groovy...</p>
<p>This example assumes that you have Groovy and Java installed and <code>groovy-all-2.4.6.jar</code> is available in your work directory.</p>
<p>Create a simple Java class which just greets Groovy:</p>
<p><strong>HelloGroovy.java</strong></p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloGroovy</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello Groovy. This is java!&quot;</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>...and compile it...</p>
<p><code>javac -cp . HelloGroovy.java</code></p>
<p>Now create a Groovy-Script which greets Java and calls the Java class from above</p>
<p><strong>HelloJava.groovy</strong></p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">println</span> <span class="s2">&quot;Hello Java, this is Groovy!&quot;</span>
</span><span class='line'><span class="n">HelloGroovy</span><span class="o">.</span><span class="na">main</span><span class="o">();</span> <span class="c1">//call the first java-snippet</span>
</span></code></pre></td></tr></table></div></figure>
<p>...and compile it...</p>
<p><code>groovyc -cp . HelloJava.groovy</code></p>
<p>Now create a third file which contains a Java class which calls the class created by the Groovy-Script</p>
<p><strong>Test.java</strong></p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Java &amp; Groovy = Dream-Team!&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="n">HelloJava</span><span class="o">.</span><span class="na">main</span><span class="o">();</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>...and compile it. This time, we need the <code>groovy-all.jar</code> in the classpath:</p>
<p><code>javac -cp ".;groovy-all-2.4.6.jar" Test.java</code></p>
<p>That's it. Now let's execute the test class:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>java -cp <span class="s2">&quot;.;groovy-all-2.4.6.jar&quot;</span> Test
</span><span class='line'>Java &amp; <span class="nv">Groovy</span> <span class="o">=</span> Dream-Team!
</span><span class='line'>Hello Java, this is Groovy!
</span><span class='line'>Hello Groovy. This is java!
</span></code></pre></td></tr></table></div></figure>
<p>Wasn't that easy?</p>
<p>PS: yes, this is very old knowledge, but sometimes the good things have to be repeated over and over again...</p>
]]></content></entry><entry><title type="html"><![CDATA[A Groovy Notebook]]></title><link href="/blog/2016/04/30/a-groovy-notebook/"/><updated>2016-06-27T20:29:40+02:00</updated><id>/blog/2016/04/30/a-groovy-notebook/</id><content type="html"><![CDATA[<p>From time to time I stumble upon a web application which lets you write notebooks like the ones you know from Mathematica. They let you mix formatted text which explains your code with code snippets. The output of those snippets is displayed and the code builds up snippet by snippet.<!--more--></p>
<div style="text-align: center;">
<img src="../images/Jypiter.png" style="width:100%;" />
<span style="font-size: smaller;">Taken from the <a href="http://blog.jupyter.org/2016/01/08/notebook-4-1-release/">Jypter Blog</a></span>
</div>
<p>This time it was <a href="http://jupyter.org/">Jypiter</a>, formerly known as <a href="http://ipython.org/notebook.html">IPython Notebook</a>. It evolved from a notebook just for Python to a cool solution suitable for all kind of languages. Unfortunately, Groovy isn't yet in the list of supported languages.</p>
<p>Since Python is not my mother tongue and I couldn't find good documentation on how to support an additional language, I thought about other ways to create a notebook for Groovy.</p>
<p>Inspired by the talk <a href="http://greachconf.com/speakers/stephan-classen-make-your-asciidoctor-groovy/">"Make your Asciidoctor Groovy"</a> by Stephan Classen (which I unfortunately haven't attended), I decided to create an asciidoctorj plugin in Groovy which lets you execute Groovy code inline.</p>
<p>There are already great examples of plugins written in Groovy, so I had a good starting point:</p>
<ul>
<li>Stephan Classen: <a href="https://github.com/asciidoctor/asciidoctorj-screenshot">asciidoctorj-screenshot</a></li>
<li>mrhaki: <a href="http://mrhaki.blogspot.de/2014/08/awesome-asciidoc-write-extensions-using.html">Awesome Asciidoctor: Write Extensions Using Groovy (or Java)</a></li>
<li>Andreas Almiray: <a href="http://www.jroller.com/aalmiray/entry/gradle_glam_custom_asciidoctor_extensions">Gradle Glam: custom asciidoctor extensions</a></li>
</ul>
<p>So I took one of them as starting point and came up with <a href="https://github.com/rdmueller/asciidoctorj-groovy">my own project</a>. The core of the extension is shown here:</p>
<p><script src="https://gist.github.com/rdmueller/037182fb79193d98835db2507edf7759.js"></script></p>
<p>It is activated whenever asciidoctor hits a <code>[groovy]</code> block. It then takes the content of the block, executes it and renders the original script together with the output. Infortunately, I couldn't find a way to return two different blocks in my extension - one which renders the source with highlighting and one which renders the pre-formatted output - so I had to do an ugly workaround which directly renders HTML. Do the simplest think which works :-)</p>
<p>Here is an example of the static rendered output: <a href="https://rawgit.com/rdmueller/asciidoctorj-groovy/master/example.html">example.html</a> with the corrsponding <a href="https://github.com/rdmueller/asciidoctorj-groovy/blob/master/src/asciidoc/index.adoc">input</a>.</p>
]]></content></entry><entry><title type="html"><![CDATA[Serialize a Map as JSON or YAML]]></title><link href="/blog/2016/04/06/serialize-a-map-as-json-or-yaml/"/><updated>2016-06-27T20:29:23+02:00</updated><id>/blog/2016/04/06/serialize-a-map-as-json-or-yaml/</id><content type="html"><![CDATA[<p>When working in a web environment, you often have to transfer arbitrary data like lists or maps as String of the network.<!--more--></p>
<p>The followin Gist shows how to solve this by serializing a list or map as JSON or YAML. In addition, it
shows how Groovy does it an a very elegant and clean way.</p>
<p><script src="https://gist.github.com/rdmueller/793d262862270eda8d3a0b5c2e9e46da.js"></script></p>
]]></content></entry></feed>