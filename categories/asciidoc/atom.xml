<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[R.D.Müller - Bits from my Brain]]></title><link href="https://rdmueller.github.io/categories/asciidoc/atom.xml" rel="self"/><link href="https://rdmueller.github.io/"/><updated>2016-06-26T18:03:39+02:00</updated><id>https://rdmueller.github.io/</id><author><name><![CDATA[Ralf D. Müller]]></name><email><![CDATA[ralf.d.mueller@gmail.com]]></email></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Why you should use AsciiDoc to document your Software Solution]]></title><link href="https://rdmueller.github.io/blog/2016/06/26/why-you-should-use-asciidoc-to-document-your-software-solution/"/><updated>2016-06-27T20:26:46+02:00</updated><id>/blog/2016/06/26/why-you-should-use-asciidoc-to-document-your-software-solution/</id><content type="html"><![CDATA[<p>Last week I wrote about why I don't like  Word, but I didn't mention an alternative.<!--more--></p>
<p>For me, AsciiDoc as markup format is a perfect alternative for technical documents. Together with the tooling provided by the AsciiDoctorJ community it fulfills all my requirements.</p>
<p>AsciiDoc is a plain text format and thus just stores the information you want to document. The text will contain - besides tables - no layout. The layout is created by whatever renderer you chose. Since you don't have to worry about the layout, it also will not distract you. No "argh - how do I get this paragraph together with the diagram on one page?"!</p>
<p>And since it is plain text, you can happily store it along with the source code of your project. This not only solves versioning problems. You can now apply version control, "code"-review and diffs the same way you are used to do with your code. It also solves the first problem of your information architecture: Where are documents stored?</p>
<p>Now, let's take a look at the extra features AsciiDoc provides over real plain text.</p>
<h2>http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#images[Images are referenced and not embedded]:</h2>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>image::sunset.jpg[] 
</span><span class='line'>image::sunset.jpg[Sunset] 
</span><span class='line'>[[img-sunset]] 
</span><span class='line'>image::sunset.jpg[caption=&quot;Figure 1: &quot;, title=&quot;A mountain sunset&quot;, alt=&quot;Sunset&quot;, width=&quot;300&quot;, height=&quot;200&quot;, link=&quot;http://www.flickr.com/photos/javh/5448336655&quot;] 
</span><span class='line'>image::http://asciidoctor.org/images/octocat.jpg[GitHub mascot]
</span></code></pre></td></tr></table></div></figure>
<p>This opens up new possibilities when you want to keep your documents up to date. No more "someone should update this diagram, but where is the source" and "I will do it later, it's too much effort now". The document will reference the image and the source of the image (UML Model, Powerpoint etc.) will be in the same location or at least referenced from the build of your documentation. Yes - build - because no body likes to read plain asciidoc, you will have to render it to a more suitable output format. This is best done with the build tools you already know: maven or gradle. And this adds the new possibilities: you take the source file of your diagrams, images, slides etc. and extract the images just before the document gets rendered. This way you only have to update the soruce, not the document.</p>
<p>BTW: that's part two of your new information architecture - you not only know where your documents are stored, you also reference the location of external sources for images.</p>
<h2>Plugins extend the capabilities of AsciiDoc</h2>
<p>The plugin I like most is the http://www.plantuml.com[PlantUML] plugin. When installed, you can describe UML diagrams in plain text and it will be rendered with the document. The magic is the same as with AsciiDoc - you don't have to care about the layout. PlantUML will render the boxes for you. This does not always make sense, but for certain types of diagrams it is bettern tan any other tool.</p>
<p>For instance when it comes to sequence diagrams - you don't want to layout them manually and PlantUML does a really good job for sequence diagrams.</p>
<p>Here is an example for PlantUML inside AsciiDoc:</p>
<p>TODO</p>
<h2>Subdocuments can be referenced</h2>
<p>Just put all your chapters in subdocuments and create a master which includes them for the rendering of the whole document. This makes it easier to handle you text. And if you need different compositions for different stakeholders, just create additional "master" documents which rearrange, leave out or even add new chapters.</p>
<p>TODO example of subdocuments</p>
]]></content></entry><entry><title type="html"><![CDATA[Why I don't like Word to write documentation]]></title><link href="https://rdmueller.github.io/blog/2016/05/16/why-i-don-t-like-word-to-write-documentation/"/><updated>2016-06-27T20:29:52+02:00</updated><id>/blog/2016/05/16/why-i-don-t-like-word-to-write-documentation/</id><content type="html"><![CDATA[<p>Don't get me wrong &ndash; MS Word is a great product for many use cases, but most of them are IMHO outdated (like writing a letter) and writing modern documentation is not a use case where MS Word shines.<!--more--></p>
<p>Today we live in the information age, but Word is page oriented &ndash; Word lets you write documents with pages, page numbers, page header and footer etc. <br  />
The table of contents lists the page numbers the content can be found on &ndash; linking to the content is not a first class feature.</p>
<p>When I write down the documentation for a project, I don't want to create pages &ndash; I want to dump information. The format in which the information will be published is important, but it is even more important to have the freedom to change the format to &ndash; for example &ndash; HTML, ePub, Word, PDF and whatever may come in the future and what my stakeholders need. +
Yes, Word can be saved as HTML and printed as PDF, but that's not the same.</p>
<p>Interesting about Word is that it implements many advanced features which seem to be hard to use. <br  />
Did you know that Word lets you…</p>
<ul>
<li>compare two documents?</li>
<li>compose a document from subdocuments?</li>
<li>reference images instead of embedding them?</li>
</ul>
<p>These are great features, but since we are not used to them, they are hard to handle.</p>
<p>Instead of comparing documents and checking the diff, we use templates with a change history table as part of the document. A proper diff together with version control would be more helpful.</p>
<p>Instead of composing documents from subdocuments, we copy and paste parts from document to document in order to create views for different stakeholders. A habit which would not be tolerated in software development :-)</p>
<p>When we use images in documents, they are embedded. So if we want to make a change, we first have to search for the source file (and hopefully find it), change it and embed it again. Storing only the reference to the image within the document would make this easier.</p>
<p>Unfortunately, composing documents and referencing images result in multifile documents which people are not used to and would break the "please mail me the doc" flow.</p>
<p>So what's the solution? Stay tuned and I will explain in my next post why I prefer asciidoc over Word...</p>
]]></content></entry><entry><title type="html"><![CDATA[A Groovy Notebook]]></title><link href="https://rdmueller.github.io/blog/2016/04/30/a-groovy-notebook/"/><updated>2016-06-27T20:29:40+02:00</updated><id>/blog/2016/04/30/a-groovy-notebook/</id><content type="html"><![CDATA[<p>From time to time I stumble upon a web application which lets you write notebooks like the ones you know from Mathematica. They let you mix formatted text which explains your code with code snippets. The output of those snippets is displayed and the code builds up snippet by snippet.<!--more--></p>
<div style="text-align: center;">
<img src="../images/Jypiter.png" style="width:100%;" />
<span style="font-size: smaller;">Taken from the <a href="http://blog.jupyter.org/2016/01/08/notebook-4-1-release/">Jypter Blog</a></span>
</div>
<p>This time it was <a href="http://jupyter.org/">Jypiter</a>, formerly known as <a href="http://ipython.org/notebook.html">IPython Notebook</a>. It evolved from a notebook just for Python to a cool solution suitable for all kind of languages. Unfortunately, Groovy isn't yet in the list of supported languages.</p>
<p>Since Python is not my mother tongue and I couldn't find good documentation on how to support an additional language, I thought about other ways to create a notebook for Groovy.</p>
<p>Inspired by the talk <a href="http://greachconf.com/speakers/stephan-classen-make-your-asciidoctor-groovy/">"Make your Asciidoctor Groovy"</a> by Stephan Classen (which I unfortunately haven't attended), I decided to create an asciidoctorj plugin in Groovy which lets you execute Groovy code inline.</p>
<p>There are already great examples of plugins written in Groovy, so I had a good starting point:</p>
<ul>
<li>Stephan Classen: <a href="https://github.com/asciidoctor/asciidoctorj-screenshot">asciidoctorj-screenshot</a></li>
<li>mrhaki: <a href="http://mrhaki.blogspot.de/2014/08/awesome-asciidoc-write-extensions-using.html">Awesome Asciidoctor: Write Extensions Using Groovy (or Java)</a></li>
<li>Andreas Almiray: <a href="http://www.jroller.com/aalmiray/entry/gradle_glam_custom_asciidoctor_extensions">Gradle Glam: custom asciidoctor extensions</a></li>
</ul>
<p>So I took one of them as starting point and came up with <a href="https://github.com/rdmueller/asciidoctorj-groovy">my own project</a>. The core of the extension is shown here:</p>
<p><script src="https://gist.github.com/rdmueller/037182fb79193d98835db2507edf7759.js"></script></p>
<p>It is activated whenever asciidoctor hits a <code>[groovy]</code> block. It then takes the content of the block, executes it and renders the original script together with the output. Infortunately, I couldn't find a way to return two different blocks in my extension - one which renders the source with highlighting and one which renders the pre-formatted output - so I had to do an ugly workaround which directly renders HTML. Do the simplest think which works :-)</p>
<p>Here is an example of the static rendered output: <a href="https://rawgit.com/rdmueller/asciidoctorj-groovy/master/example.html">example.html</a> with the corrsponding <a href="https://github.com/rdmueller/asciidoctorj-groovy/blob/master/src/asciidoc/index.adoc">input</a>.</p>
]]></content></entry><entry><title type="html"><![CDATA[Jatumba!]]></title><link href="https://rdmueller.github.io/blog/2016/03/10/jatumba/"/><updated>2016-06-27T20:29:15+02:00</updated><id>/blog/2016/03/10/jatumba/</id><content type="html"><![CDATA[<p>Zwei Tage Javaland liegen gerade hinter mir. Zusammen mit <a href="https://twitter.com/tokraft">Tobias Kraft</a> hatte ich die tolle Gelegenheit unseren Vortrag über Spock und Geb nochmal vor einem größeren Publikum vorzutragen.<!--more--></p>
<p>Die zwei Tage waren natürlich vollgepackt mit Vorträgen, gutem Essen und guter Laune. Im Netzt gibt es schon einige gute Zusammenfassungen der Tage z.B. bei <a href="http://blog.exensio.de/2016/03/javaland-2016.html">exensio</a> und <a href="https://develishdevelopment.wordpress.com/2016/03/09/javaland-2016-conference-day-1/">develishdevelop</a>.</p>
<p>Für mich waren folgende Vorträge am interessantesten:</p>
<ul>
<li><a href="https://twitter.com/mittie">Dierk König</a> "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509525">Fun in GroovyLand</a>": Wie Tobias schon geschrieben hat, super Vortragsstil trotz ausgefallener Technik. Und @canonical + @builder haben sich bei mir als nützliche Annotation eingeprägt</li>
<li><a href="https://twitter.com/danielgrycman">Daniel Grycman</a> "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509701">Introduction to Agile Documentation</a>": selbst noch nicht gesehen, soll aber gut gewesen sein, da AsciiDoc ;-)</li>
<li><a href="https://twitter.com/mrhaki">MrHaki</a> "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509825">Writing Documentation with Asciidoctor Is Awesome</a>": Toller Vortragsstil mit Live-Coding über ein langes Asciidoc-Dokument</li>
<li>Andreas Knuth "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509726">PhantomJS - Schweizer Taschenmesser der WWW-Automatisierung</a>": Interessante Einblicke über die unter PhantomJS liegende Technologie und warum wir <a href="https://github.com/KDAB/phantomjs-cef">PhantomJS-CEF</a> brauchen.</li>
<li><a href="https://twitter.com/goldstift">Alexander Heusingfeld</a> und <a href="https://twitter.com/taval">Tammo van Lessen</a> "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509488">When Microservices Meet Real-World Projects: Lessons Learned</a>": Super Tipps und eine Leand-Deployment-Pipeline (Pull statt Push!) -> <a href="https://www.innoq.com/en/talks/2016/03/javaland-2016-microservices-lessons-learned/">Slides</a></li>
<li><a href="https://twitter.com/madmas">Markus Schlichting</a> "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509841">Token statt Cookies dank JWT</a>": genau, was ich gesucht habe, um meine JSESSIONID los zu werden! -> <a href="https://github.com/madmas/TokenVsCookies/tree/JavaLand2016">Slides</a></li>
</ul>
<table>
<tr>
<td>
<blockquote class="twitter-tweet" data-lang="de"><p lang="en" dir="ltr">Lots of people interested in Testing with Spock and Geb with <a href="https://twitter.com/tokraft">@tokraft</a> and <a href="https://twitter.com/RalfDMueller">@RalfDMueller</a> at <a href="https://twitter.com/hashtag/JavaLand?src=hash">#JavaLand</a> <a href="https://t.co/f7XBxrNHCl">pic.twitter.com/f7XBxrNHCl</a></p>&mdash; Florian Hopf (@fhopf) <a href="https://twitter.com/fhopf/status/707185245066547200">8. März 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></td>
<td>
<blockquote class="twitter-tweet" data-lang="de"><p lang="en" dir="ltr">Testing automated with <a href="https://twitter.com/hashtag/Selenium?src=hash">#Selenium</a> <a href="https://twitter.com/hashtag/WebDriver?src=hash">#WebDriver</a>, <a href="https://twitter.com/hashtag/Geb?src=hash">#Geb</a> and <a href="https://twitter.com/hashtag/Spock?src=hash">#Spock</a> demonstrated by <a href="https://twitter.com/tokraft">@tokraft</a> at <a href="https://twitter.com/hashtag/JavaLandConf?src=hash">#JavaLandConf</a> 👌 <a href="https://t.co/ssQBhCjtNj">pic.twitter.com/ssQBhCjtNj</a></p>&mdash; Markus ★ (@madmas) <a href="https://twitter.com/madmas/status/707181204261486592">8. März 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</td>
</tr>
</table>
<p><script async class="speakerdeck-embed" data-id="3e2e77dd039b45879579a7b6895e5203" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script></p>
<p>Wer den Vortrag verpasst hat, kann sich das Video vom Entwicklertag letzten Jahres nochmal ansehen:</p>
<p><iframe allowfullscreen="" frameborder="0"  src="https://www.youtube.com/embed/L75DdPon5Gk" width="720" height="480"></iframe></p>
]]></content></entry><entry><title type="html"><![CDATA[Spock-Reports with Templates]]></title><link href="https://rdmueller.github.io/blog/2015/03/15/spock-reports-with-templates/"/><updated>2016-06-27T20:28:04+02:00</updated><id>/blog/2015/03/15/spock-reports-with-templates/</id><content type="html"><![CDATA[<p>The new template engine for the Spock-Reports-Plugin is out. Let's build an asciidoc template with it.<!--more--></p>
<h3>Step 1: configure the plugin</h3>
<p>Renato describes this step in detail on the <a href="https://github.com/renatoathaydes/spock-reports">Plugin Homepage</a>. I've placed the properties file in <code>src/test/resources/main/META-INF/services/</code> and so I place my templates also in <code>src/test/resources/spockreporttemplate/</code></p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">specTemplateFile</span><span class="o">=</span><span class="s">/spockreporttemplate/</span><span class="n">spec</span><span class="o">-</span><span class="n">template</span><span class="o">.</span><span class="na">ad</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">reportFileExtension</span><span class="o">=</span><span class="n">ad</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">summaryTemplateFile</span><span class="o">=</span><span class="s">/spockreporttemplate/</span><span class="n">summary</span><span class="o">-</span><span class="n">template</span><span class="o">.</span><span class="na">ad</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">summaryFileName</span><span class="o">=</span><span class="n">summary</span><span class="o">.</span><span class="na">ad</span>
</span></code></pre></td></tr></table></div></figure>
<p>Just to get started, I placed two emtpy files <code>spec-template.ad</code> and <code>summary-template.ad</code> at the right location and ran my tests just to see that those empty templates are picked up.</p>
<h3>Step 2: create a summary template</h3>
<p>I'll start with the summary report. It seems to be the easier one. Renato already provided a <a href="https://raw.githubusercontent.com/renatoathaydes/spock-reports/master/src/main/resources/templateReportCreator/summary-template.md">markdown sample</a>, so let's take a look at it to see the data which is available to the template.</p>
<p>So it seems that we have a convinience function (<code>aggregateStats</code>) which creates some statistical data about our test runs and the <code>data</code> object itself.</p>
<p>Let's modify the empty template in order to output both data structures:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;%</span> <span class="kt">def</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Utils</span><span class="o">.</span><span class="na">aggregateStats</span><span class="o">(</span> <span class="n">data</span> <span class="o">)</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">inspect</span><span class="o">()}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
</span><span class='line'><span class="n">$</span><span class="o">{</span><span class="n">data</span><span class="o">.</span><span class="na">inspect</span><span class="o">()}</span>
</span></code></pre></td></tr></table></div></figure>
<p>which leads to the following output: (a little bit reformatted for better readability)</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span><span class="s1">&#39;total&#39;</span><span class="o">:</span><span class="mi">13</span><span class="o">,</span> <span class="s1">&#39;passed&#39;</span><span class="o">:</span><span class="mi">13</span><span class="o">,</span> <span class="s1">&#39;failed&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;fFails&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;fErrors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mf">258.0</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;DatabaseDrivenSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">1</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">67</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;DataDrivenSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">3</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">19</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;DerivedSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">2</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">16</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;EmptyStackSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">4</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">20</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;HamcrestMatchersSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">1</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">21</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;HelloSpockSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">1</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">3</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;IncludeExcludeExtensionSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">3</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">3</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;OrderedInteractionsSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">1</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">49</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;PublisherSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">2</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">24</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;StackWithOneElementSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">4</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">4</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;StackWithThreeElementsSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">4</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">7</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;StepwiseExtensionSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">3</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">4</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;UsingJUnitRulesSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">1</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">21</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>That's great! We get hashmaps which can be easily inspected. That will make it even easier to write a template.</p>
<p>Now let's come up with the real template:</p>
<h4>summary-template.ad:</h4>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;%</span> <span class="kt">def</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Utils</span><span class="o">.</span><span class="na">aggregateStats</span><span class="o">(</span> <span class="n">data</span> <span class="o">)</span>
</span><span class='line'> <span class="o">%&gt;=</span> <span class="n">Specification</span> <span class="n">run</span> <span class="n">results</span>
</span><span class='line'>
</span><span class='line'><span class="o">==</span> <span class="n">Specifications</span> <span class="n">summary</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">small</span><span class="o">&gt;</span><span class="err">#</span><span class="n">created</span> <span class="n">on</span> <span class="n">$</span><span class="o">{</span><span class="k">new</span> <span class="n">Date</span><span class="o">()}</span> <span class="n">by</span> <span class="n">$</span><span class="o">{</span><span class="n">System</span><span class="o">.</span><span class="na">properties</span><span class="o">[</span><span class="s1">&#39;user.name&#39;</span><span class="o">]}</span><span class="err">#</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="na">summary</span>
</span><span class='line'><span class="o">[</span><span class="n">options</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">|==================================================================================================================================</span>
</span><span class='line'><span class="o">|</span> <span class="n">Total</span>          <span class="o">|</span> <span class="n">Passed</span>          <span class="o">|</span> <span class="n">Failed</span>          <span class="o">|</span> <span class="n">Feature</span> <span class="n">failures</span> <span class="o">|</span> <span class="n">Feature</span> <span class="n">errors</span>   <span class="o">|</span> <span class="n">Success</span> <span class="n">rate</span>        <span class="o">|</span> <span class="n">Total</span> <span class="n">time</span> <span class="o">(</span><span class="n">ms</span><span class="o">)</span> 
</span><span class='line'><span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">total</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">passed</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">failed</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">fFails</span><span class="o">}</span>  <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">fErrors</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">successRate</span><span class="o">}|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">time</span><span class="o">}</span>   
</span><span class='line'><span class="o">|==================================================================================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="o">==</span> <span class="n">Specifications</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">options</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">|===================================================================</span>
</span><span class='line'><span class="o">|</span><span class="n">Name</span>  <span class="o">|</span> <span class="n">Features</span> <span class="o">|</span> <span class="n">Failed</span> <span class="o">|</span> <span class="n">Errors</span> <span class="o">|</span> <span class="n">Skipped</span> <span class="o">|</span> <span class="n">Success</span> <span class="n">rate</span> <span class="o">|</span> <span class="n">Time</span> 
</span><span class='line'><span class="o">&lt;%</span> <span class="n">data</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">name</span><span class="o">,</span> <span class="n">map</span> <span class="o">-&gt;</span>
</span><span class='line'> <span class="o">%&gt;|</span> <span class="n">$name</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">totalRuns</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">failures</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">errors</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">skipped</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">successRate</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">time</span><span class="o">}</span> 
</span><span class='line'><span class="o">&lt;%</span> <span class="o">}</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="o">|===================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">small</span><span class="o">]</span><span class="err">#</span><span class="n">generated</span> <span class="n">by</span> <span class="n">$</span><span class="o">{</span><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">SpockReportExtension</span><span class="o">.</span><span class="na">PROJECT_URL</span><span class="o">}[</span><span class="n">Athaydes</span> <span class="n">Spock</span> <span class="n">Reports</span><span class="o">]</span><span class="err">#</span>
</span></code></pre></td></tr></table></div></figure>
<p>Since MarkDown and AsciiDoc do not differ too much for this template, this was easy! Details regarding the formatting can be solved later...</p>
<p>To check the correct asciidoc syntax, you can simply copy and paste the result to the asciidoc live editor https://asciidoclive.com/</p>
<h3>Step 3: create a spec template</h3>
<p>Now let's do the same with the spec template. First try to figure out what data we will have available.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">$</span><span class="o">{</span><span class="n">data</span><span class="o">.</span><span class="na">dump</span><span class="o">()}</span>
</span></code></pre></td></tr></table></div></figure>
<p>but this time, the dump does not give us such a good result: (reformatted for readability)</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">SpecData</span><span class="err">@</span><span class="mi">5</span><span class="n">de17399</span> 
</span><span class='line'><span class="n">info</span><span class="o">=</span><span class="n">org</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">runtime</span><span class="o">.</span><span class="na">model</span><span class="o">.</span><span class="na">SpecInfo</span><span class="err">@</span><span class="mi">7</span><span class="n">c6c71f5</span>
</span><span class='line'><span class="n">featureRuns</span><span class="o">=[</span>
</span><span class='line'>	<span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">FeatureRun</span><span class="err">@</span><span class="mi">33</span><span class="n">adcba4</span><span class="o">,</span>
</span><span class='line'>	<span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">FeatureRun</span><span class="err">@</span><span class="mi">5714967</span><span class="n">d</span><span class="o">,</span>
</span><span class='line'>	<span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">FeatureRun</span><span class="err">@</span><span class="mi">8</span><span class="n">a41535</span>
</span><span class='line'>	<span class="o">]</span> 
</span><span class='line'><span class="n">totalTime</span><span class="o">=</span><span class="mi">10</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>We can only see the different java object within the dump and not the full data structure. Since I don't like to go to the source of those structure and analyze it, I now take the MarkDown sample template and start to transform it right away. This should lead to a solution which will fit for the moment:</p>
<h4>spec-template.ad:</h4>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;%</span>  <span class="kt">def</span> <span class="n">fmt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">StringFormatHelper</span><span class="o">()</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Utils</span><span class="o">.</span><span class="na">stats</span><span class="o">(</span> <span class="n">data</span> <span class="o">)</span>
</span><span class='line'> <span class="o">%&gt;==</span> <span class="n">Report</span> <span class="k">for</span> <span class="n">$</span><span class="o">{</span><span class="n">data</span><span class="o">.</span><span class="na">info</span><span class="o">.</span><span class="na">description</span><span class="o">.</span><span class="na">className</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">===</span> <span class="n">Summary</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">cols</span><span class="o">=</span><span class="s2">&quot;asciidoc,asciidoc&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">|====</span>
</span><span class='line'><span class="o">|*</span> <span class="n">Total</span> <span class="nl">Runs:</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">totalRuns</span><span class="o">}</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Success</span> <span class="nl">Rate:</span> <span class="n">$</span><span class="o">{</span><span class="n">fmt</span><span class="o">.</span><span class="na">toPercentage</span><span class="o">(</span><span class="n">stats</span><span class="o">.</span><span class="na">successRate</span><span class="o">)}</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Total</span> <span class="nl">time:</span> <span class="n">$</span><span class="o">{</span><span class="n">fmt</span><span class="o">.</span><span class="na">toTimeDuration</span><span class="o">(</span><span class="n">stats</span><span class="o">.</span><span class="na">time</span><span class="o">)}</span>
</span><span class='line'><span class="o">|*</span> <span class="nl">Failures:</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">failures</span><span class="o">}</span>
</span><span class='line'> <span class="o">*</span> <span class="nl">Errors:</span>   <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">errors</span><span class="o">}</span>
</span><span class='line'> <span class="o">*</span> <span class="nl">Skipped:</span>  <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">skipped</span><span class="o">}</span>
</span><span class='line'><span class="o">|====</span>
</span><span class='line'>
</span><span class='line'><span class="o">===</span> <span class="n">Features</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'>    <span class="n">features</span><span class="o">.</span><span class="na">forEach</span> <span class="o">{</span> <span class="n">name</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="n">blocks</span><span class="o">,</span> <span class="n">iterations</span><span class="o">,</span> <span class="n">params</span> <span class="o">-&gt;</span>
</span><span class='line'><span class="o">%&gt;</span>
</span><span class='line'><span class="o">====</span> <span class="n">$name</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Result:</span> <span class="o">**</span><span class="n">$result</span><span class="o">**</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span> <span class="n">block</span> <span class="k">in</span> <span class="n">blocks</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="o">%&gt;</span>
</span><span class='line'><span class="o">*</span> <span class="n">$</span><span class="o">{</span><span class="n">block</span><span class="o">.</span><span class="na">kind</span><span class="o">}</span> <span class="n">$</span><span class="o">{</span><span class="n">block</span><span class="o">.</span><span class="na">text</span><span class="o">}</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kt">def</span> <span class="n">executedIterations</span> <span class="o">=</span> <span class="n">iterations</span><span class="o">.</span><span class="na">findAll</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">dataValues</span> <span class="o">||</span> <span class="n">it</span><span class="o">.</span><span class="na">errors</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">params</span> <span class="o">&amp;&amp;</span> <span class="n">executedIterations</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="o">%&gt;</span>
</span><span class='line'><span class="o">[</span><span class="n">options</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">|====</span>
</span><span class='line'><span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">params</span><span class="o">.</span><span class="na">join</span><span class="o">(</span> <span class="s1">&#39; | &#39;</span> <span class="o">)}</span> <span class="o">|</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span> <span class="n">iteration</span> <span class="k">in</span> <span class="n">executedIterations</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">%&gt;|</span> <span class="n">$</span><span class="o">{</span><span class="n">iteration</span><span class="o">.</span><span class="na">dataValues</span><span class="o">.</span><span class="na">join</span><span class="o">(</span> <span class="s1">&#39; | &#39;</span> <span class="o">)}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">iteration</span><span class="o">.</span><span class="na">errors</span> <span class="o">?</span> <span class="s1">&#39;(FAIL)&#39;</span> <span class="o">:</span> <span class="s1">&#39;(PASS)&#39;</span><span class="o">}</span>
</span><span class='line'><span class="o">&lt;%</span>          <span class="o">}</span> 
</span><span class='line'><span class="o">%&gt;|====</span>
</span><span class='line'><span class="o">&lt;%</span>      <span class="o">}</span>
</span><span class='line'>        <span class="kt">def</span> <span class="n">problems</span> <span class="o">=</span> <span class="n">executedIterations</span><span class="o">.</span><span class="na">findAll</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">errors</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">problems</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;\nThe following problems occurred:\n\n&quot;</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span> <span class="n">badIteration</span> <span class="k">in</span> <span class="n">problems</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span> <span class="n">badIteration</span><span class="o">.</span><span class="na">dataValues</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;* &#39;</span> <span class="o">&lt;&lt;</span> <span class="n">badIteration</span><span class="o">.</span><span class="na">dataValues</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;\n&#39;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span> <span class="n">error</span> <span class="k">in</span> <span class="n">badIteration</span><span class="o">.</span><span class="na">errors</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;----\n&#39;</span> <span class="o">&lt;&lt;</span> <span class="n">error</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;\n----\n&#39;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> <span class="o">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">small</span><span class="o">]</span><span class="err">#</span><span class="n">generated</span> <span class="n">by</span> <span class="n">$</span><span class="o">{</span><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">SpockReportExtension</span><span class="o">.</span><span class="na">PROJECT_URL</span><span class="o">}[</span><span class="n">Athaydes</span> <span class="n">Spock</span> <span class="n">Reports</span><span class="o">]</span><span class="err">#</span>
</span></code></pre></td></tr></table></div></figure>
<p>The result looks good :-) Now that we have the summary report and all spec reports, we can add a small section to the summary template which includes all spec reports or order to create one big report file:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;%</span> <span class="n">data</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">name</span><span class="o">,</span> <span class="n">map</span> <span class="o">-&gt;</span>
</span><span class='line'> <span class="o">%&gt;</span>
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">include:</span><span class="o">:</span><span class="n">$</span><span class="o">{</span><span class="n">name</span><span class="o">}.</span><span class="na">ad</span><span class="o">[]</span>
</span><span class='line'><span class="o">&lt;%</span> <span class="o">}</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now we only need to create a gradle task which renders it.</p>
]]></content></entry></feed>