<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[R.D.Müller - Bits from my Brain]]></title><link href="https://rdmueller.github.io/atom.xml" rel="self"/><link href="https://rdmueller.github.io/"/><updated>2016-06-27T20:29:52+02:00</updated><id>https://rdmueller.github.io/</id><author><name><![CDATA[Ralf D. Müller]]></name><email><![CDATA[ralf.d.mueller@gmail.com]]></email></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[Why you should use AsciiDoc to document your Software Solution]]></title><link href="https://rdmueller.github.io/blog/2016/06/26/why-you-should-use-asciidoc-to-document-your-software-solution/"/><updated>2016-06-27T20:26:46+02:00</updated><id>/blog/2016/06/26/why-you-should-use-asciidoc-to-document-your-software-solution/</id><content type="html"><![CDATA[<p>Last week I wrote about why I don't like  Word, but I didn't mention an alternative.<!--more--></p>
<p>For me, AsciiDoc as markup format is a perfect alternative for technical documents. Together with the tooling provided by the AsciiDoctorJ community it fulfills all my requirements.</p>
<p>AsciiDoc is a plain text format and thus just stores the information you want to document. The text will contain - besides tables - no layout. The layout is created by whatever renderer you chose. Since you don't have to worry about the layout, it also will not distract you. No "argh - how do I get this paragraph together with the diagram on one page?"!</p>
<p>And since it is plain text, you can happily store it along with the source code of your project. This not only solves versioning problems. You can now apply version control, "code"-review and diffs the same way you are used to do with your code. It also solves the first problem of your information architecture: Where are documents stored?</p>
<p>Now, let's take a look at the extra features AsciiDoc provides over real plain text.</p>
<h2>http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#images[Images are referenced and not embedded]:</h2>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>image::sunset.jpg[] 
</span><span class='line'>image::sunset.jpg[Sunset] 
</span><span class='line'>[[img-sunset]] 
</span><span class='line'>image::sunset.jpg[caption=&quot;Figure 1: &quot;, title=&quot;A mountain sunset&quot;, alt=&quot;Sunset&quot;, width=&quot;300&quot;, height=&quot;200&quot;, link=&quot;http://www.flickr.com/photos/javh/5448336655&quot;] 
</span><span class='line'>image::http://asciidoctor.org/images/octocat.jpg[GitHub mascot]
</span></code></pre></td></tr></table></div></figure>
<p>This opens up new possibilities when you want to keep your documents up to date. No more "someone should update this diagram, but where is the source" and "I will do it later, it's too much effort now". The document will reference the image and the source of the image (UML Model, Powerpoint etc.) will be in the same location or at least referenced from the build of your documentation. Yes - build - because no body likes to read plain asciidoc, you will have to render it to a more suitable output format. This is best done with the build tools you already know: maven or gradle. And this adds the new possibilities: you take the source file of your diagrams, images, slides etc. and extract the images just before the document gets rendered. This way you only have to update the soruce, not the document.</p>
<p>BTW: that's part two of your new information architecture - you not only know where your documents are stored, you also reference the location of external sources for images.</p>
<h2>Plugins extend the capabilities of AsciiDoc</h2>
<p>The plugin I like most is the http://www.plantuml.com[PlantUML] plugin. When installed, you can describe UML diagrams in plain text and it will be rendered with the document. The magic is the same as with AsciiDoc - you don't have to care about the layout. PlantUML will render the boxes for you. This does not always make sense, but for certain types of diagrams it is bettern tan any other tool.</p>
<p>For instance when it comes to sequence diagrams - you don't want to layout them manually and PlantUML does a really good job for sequence diagrams.</p>
<p>Here is an example for PlantUML inside AsciiDoc:</p>
<p>TODO</p>
<h2>Subdocuments can be referenced</h2>
<p>Just put all your chapters in subdocuments and create a master which includes them for the rendering of the whole document. This makes it easier to handle you text. And if you need different compositions for different stakeholders, just create additional "master" documents which rearrange, leave out or even add new chapters.</p>
<p>TODO example of subdocuments</p>
]]></content></entry><entry><title type="html"><![CDATA[Why I don't like Word to write documentation]]></title><link href="https://rdmueller.github.io/blog/2016/05/16/why-i-don-t-like-word-to-write-documentation/"/><updated>2016-06-27T20:29:52+02:00</updated><id>/blog/2016/05/16/why-i-don-t-like-word-to-write-documentation/</id><content type="html"><![CDATA[<p>Don't get me wrong &ndash; MS Word is a great product for many use cases, but most of them are IMHO outdated (like writing a letter) and writing modern documentation is not a use case where MS Word shines.<!--more--></p>
<p>Today we live in the information age, but Word is page oriented &ndash; Word lets you write documents with pages, page numbers, page header and footer etc. <br  />
The table of contents lists the page numbers the content can be found on &ndash; linking to the content is not a first class feature.</p>
<p>When I write down the documentation for a project, I don't want to create pages &ndash; I want to dump information. The format in which the information will be published is important, but it is even more important to have the freedom to change the format to &ndash; for example &ndash; HTML, ePub, Word, PDF and whatever may come in the future and what my stakeholders need. +
Yes, Word can be saved as HTML and printed as PDF, but that's not the same.</p>
<p>Interesting about Word is that it implements many advanced features which seem to be hard to use. <br  />
Did you know that Word lets you…</p>
<ul>
<li>compare two documents?</li>
<li>compose a document from subdocuments?</li>
<li>reference images instead of embedding them?</li>
</ul>
<p>These are great features, but since we are not used to them, they are hard to handle.</p>
<p>Instead of comparing documents and checking the diff, we use templates with a change history table as part of the document. A proper diff together with version control would be more helpful.</p>
<p>Instead of composing documents from subdocuments, we copy and paste parts from document to document in order to create views for different stakeholders. A habit which would not be tolerated in software development :-)</p>
<p>When we use images in documents, they are embedded. So if we want to make a change, we first have to search for the source file (and hopefully find it), change it and embed it again. Storing only the reference to the image within the document would make this easier.</p>
<p>Unfortunately, composing documents and referencing images result in multifile documents which people are not used to and would break the "please mail me the doc" flow.</p>
<p>So what's the solution? Stay tuned and I will explain in my next post why I prefer asciidoc over Word...</p>
]]></content></entry><entry><title type="html"><![CDATA[Groovy is Java is Groovy...]]></title><link href="https://rdmueller.github.io/blog/2016/05/09/groovy-is-java-is-groovy/"/><updated>2016-06-27T20:29:47+02:00</updated><id>/blog/2016/05/09/groovy-is-java-is-groovy/</id><content type="html"><![CDATA[<p>There still seem to be some Java-Developers who are afraid of
mixing their Java codebase with the power of Groovy.<!--more--></p>
<p>Some time ago, it was a valid argument that the dependency
to the groovy-all.jar would blow up the generated application,
but today many frameworks like Jasper-Reports, Apache-Camel and others might already add the
groovy-all.jar to the class path of your application. So there is no reason anymore
not to use Groovy in your project.</p>
<p>The following snippets will show you how easy it is to combine Java und Groovy, because Groovy is Java and Java is Groovy...</p>
<p>This example assumes that you have Groovy and Java installed and <code>groovy-all-2.4.6.jar</code> is available in your work directory.</p>
<p>Create a simple Java class which just greets Groovy:</p>
<p><strong>HelloGroovy.java</strong></p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloGroovy</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello Groovy. This is java!&quot;</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>...and compile it...</p>
<p><code>javac -cp . HelloGroovy.java</code></p>
<p>Now create a Groovy-Script which greets Java and calls the Java class from above</p>
<p><strong>HelloJava.groovy</strong></p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">println</span> <span class="s2">&quot;Hello Java, this is Groovy!&quot;</span>
</span><span class='line'><span class="n">HelloGroovy</span><span class="o">.</span><span class="na">main</span><span class="o">();</span> <span class="c1">//call the first java-snippet</span>
</span></code></pre></td></tr></table></div></figure>
<p>...and compile it...</p>
<p><code>groovyc -cp . HelloJava.groovy</code></p>
<p>Now create a third file which contains a Java class which calls the class created by the Groovy-Script</p>
<p><strong>Test.java</strong></p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Java &amp; Groovy = Dream-Team!&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="n">HelloJava</span><span class="o">.</span><span class="na">main</span><span class="o">();</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>...and compile it. This time, we need the <code>groovy-all.jar</code> in the classpath:</p>
<p><code>javac -cp ".;groovy-all-2.4.6.jar" Test.java</code></p>
<p>That's it. Now let's execute the test class:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>java -cp <span class="s2">&quot;.;groovy-all-2.4.6.jar&quot;</span> Test
</span><span class='line'>Java &amp; <span class="nv">Groovy</span> <span class="o">=</span> Dream-Team!
</span><span class='line'>Hello Java, this is Groovy!
</span><span class='line'>Hello Groovy. This is java!
</span></code></pre></td></tr></table></div></figure>
<p>Wasn't that easy?</p>
<p>PS: yes, this is very old knowledge, but sometimes the good things have to be repeated over and over again...</p>
]]></content></entry><entry><title type="html"><![CDATA[A Groovy Notebook]]></title><link href="https://rdmueller.github.io/blog/2016/04/30/a-groovy-notebook/"/><updated>2016-06-27T20:29:40+02:00</updated><id>/blog/2016/04/30/a-groovy-notebook/</id><content type="html"><![CDATA[<p>From time to time I stumble upon a web application which lets you write notebooks like the ones you know from Mathematica. They let you mix formatted text which explains your code with code snippets. The output of those snippets is displayed and the code builds up snippet by snippet.<!--more--></p>
<div style="text-align: center;">
<img src="../images/Jypiter.png" style="width:100%;" />
<span style="font-size: smaller;">Taken from the <a href="http://blog.jupyter.org/2016/01/08/notebook-4-1-release/">Jypter Blog</a></span>
</div>
<p>This time it was <a href="http://jupyter.org/">Jypiter</a>, formerly known as <a href="http://ipython.org/notebook.html">IPython Notebook</a>. It evolved from a notebook just for Python to a cool solution suitable for all kind of languages. Unfortunately, Groovy isn't yet in the list of supported languages.</p>
<p>Since Python is not my mother tongue and I couldn't find good documentation on how to support an additional language, I thought about other ways to create a notebook for Groovy.</p>
<p>Inspired by the talk <a href="http://greachconf.com/speakers/stephan-classen-make-your-asciidoctor-groovy/">"Make your Asciidoctor Groovy"</a> by Stephan Classen (which I unfortunately haven't attended), I decided to create an asciidoctorj plugin in Groovy which lets you execute Groovy code inline.</p>
<p>There are already great examples of plugins written in Groovy, so I had a good starting point:</p>
<ul>
<li>Stephan Classen: <a href="https://github.com/asciidoctor/asciidoctorj-screenshot">asciidoctorj-screenshot</a></li>
<li>mrhaki: <a href="http://mrhaki.blogspot.de/2014/08/awesome-asciidoc-write-extensions-using.html">Awesome Asciidoctor: Write Extensions Using Groovy (or Java)</a></li>
<li>Andreas Almiray: <a href="http://www.jroller.com/aalmiray/entry/gradle_glam_custom_asciidoctor_extensions">Gradle Glam: custom asciidoctor extensions</a></li>
</ul>
<p>So I took one of them as starting point and came up with <a href="https://github.com/rdmueller/asciidoctorj-groovy">my own project</a>. The core of the extension is shown here:</p>
<p><script src="https://gist.github.com/rdmueller/037182fb79193d98835db2507edf7759.js"></script></p>
<p>It is activated whenever asciidoctor hits a <code>[groovy]</code> block. It then takes the content of the block, executes it and renders the original script together with the output. Infortunately, I couldn't find a way to return two different blocks in my extension - one which renders the source with highlighting and one which renders the pre-formatted output - so I had to do an ugly workaround which directly renders HTML. Do the simplest think which works :-)</p>
<p>Here is an example of the static rendered output: <a href="https://rawgit.com/rdmueller/asciidoctorj-groovy/master/example.html">example.html</a> with the corrsponding <a href="https://github.com/rdmueller/asciidoctorj-groovy/blob/master/src/asciidoc/index.adoc">input</a>.</p>
]]></content></entry><entry><title type="html"><![CDATA[Wacom Bamboo Spark - could have been so much more...]]></title><link href="https://rdmueller.github.io/blog/2016/04/28/wacom-bamboo-spark-could-have-been-so-much-more/"/><updated>2016-06-27T20:29:31+02:00</updated><id>/blog/2016/04/28/wacom-bamboo-spark-could-have-been-so-much-more/</id><content type="html"><![CDATA[<p>Bad news first: I guess I do not belong to the target group of the <a href="http://www.wacom.com/en-us/products/mobile-accessories/bamboo-spark">Wacom Bamboo Spark</a> :-)<!--more--></p>
<p>My week began with a Mail from Amazon telling me that there they have a special offer for one of my Wishlist items: the Bamboo Spark digital notepad. I couldn't resist and ordered it, but sone came doubts: do I have any use case for it?</p>
<p>Yesterday the Spark arrived. As always with Wacom, the unboxing gives you the feeling that you've made the right decision and have bought a well designed product. The setup is also a no brainer and you can start to write and sketch immediately. The pen feels like a normal pen and the paper - well it is just normal paper.</p>
<p>The digitizer works very accurate. The simple status LED shows you if you are on a blank page (from the Spark's point of view) or if it already has some content. A press of the button advanced to the next blank page.</p>
<p>The sync with the mobile device seems to be activated whenever you switch to a new blank page. There is no other control to start the sync. That's something I had to figure out, but it is ok. As soon as the pages are synced to the wacom cloud, you can convert them to plain text, PDF or image. The text recognition works quite well, even for mixed language content.</p>
<p>So far so good. If you want to sync what you've written and sketched, this product is perfect. But that seems to be all functionality you get with the bamboo spark app. Nothing more. So, I guess there are people who need exactly this functionality and for them, the bamboo spark is the perfect product.</p>
<h2>But I hoped to get a bit more</h2>
<ul>
<li>compared to scanner apps like <a href="http://whitelines.se/link/">Whitelines Link</a> it could be much more intelligent. Whitelines only captures the paper by camera, but it offers three checkboxes through which you can tell the app to directly store the captures image in evernote, dropbox or send it via mail. Such a functionality should be a quick win for wacom</li>
<li>the spark uses "the soon-to-be industry standard WILL™ universal ink files". But when you try to get more information about this format, you have to sign agreements in order to get the SDK. WILL seems to be a zip file with a binary data file as main content. It would have been nice if the file format would have been easier to use.</li>
<li>but you can also export your written notes as plain text. And this seems to be the key to additional, self build functionality</li>
</ul>
<h2>Ideas on how to hack the functionality</h2>
<h3>Plain Text Processing</h3>
<p>Since the first anoto smart pens like the <a href="https://www.livescribe.com/">livescribe smartpen</a> hit the market, I dreamed of functionality where you use plain paper to create input for our personal digital assistant (PDA) as the devices where called back then. Today I would like to use the bamboo spark to interact with my smartphone. Here are basically three simple use cases</p>
<h4>1. write a simple note and send it via mail</h4>
<p>This could be as simple as writing a note like this on the spark:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>mailto: someone@example.com
</span><span class='line'>Please don&#39;t forget to send me that info...
</span><span class='line'>Cheers,
</span><span class='line'>Ralf
</span></code></pre></td></tr></table></div></figure>
<h4>2. write a to-do which will added to your favorite to-do list</h4>
<p>same pattern:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>ToDo: buy some beer for the party next weekend
</span></code></pre></td></tr></table></div></figure>
<h4>3. ... or add something to your calendar</h4>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Date: 29.04. 19:00 Java User Group Meetup
</span></code></pre></td></tr></table></div></figure>
<p>And yep, it basically works! You can scribble these notes on the spark, convert them to text and then send them - for instance as email - to a script which does a further processing. Not build in, but possible and easy to implement. But this is unfortunately not an automated step since there is no API for the wacom cloud (at least none I am aware of) and so you have to convert your notes manually to plain text and send them. Each page by its own :-(</p>
<h3>Extract Graphical Data</h3>
<p>Another Idea is to process the strokes for additional functionality. The system should be able to give you the timing of the strokes along with the strokes themselves. So in addition to the OCR, you could implement functionality like the whitelines checkboxes - the system should be able to recognize a checkmark in a certain position or a special symbol.</p>
<p>The WILL format seems to be the right way, but since it is proprietary, I don't want to take this route. It would be different if it would be more open.</p>
<p>So I checked the exported PDF - bingo. The PDF contains not the strokes but the drawing - e.g. for each line a polygon which describes the border of the stroke. And those polygons seem to be even in the order of drawing. In order to give it a try, I create a small javascript which visualizes the PDF drawing:</p>
<p><iframe width="100%" height="600" src="//jsfiddle.net/RDMueller/wnraf3rp/3/embedded/result,js/" allowfullscreen="allowfullscreen" frameborder="0"></iframe></p>
<!--script async src="https://jsfiddle.net/RDMueller/wnraf3rp/3/embed/result,js,html/"></script-->
<h2>tl;dr</h2>
<p>The wacom bamboo spark is a great tool if you want to have digital copies of your handwritten sketches and notes. But unfortunately there is no extra functionality out of the box. Hacking is possible, wacom could make it easier.</p>
]]></content></entry><entry><title type="html"><![CDATA[Serialize a Map as JSON or YAML]]></title><link href="https://rdmueller.github.io/blog/2016/04/06/serialize-a-map-as-json-or-yaml/"/><updated>2016-06-27T20:29:23+02:00</updated><id>/blog/2016/04/06/serialize-a-map-as-json-or-yaml/</id><content type="html"><![CDATA[<p>When working in a web environment, you often have to transfer arbitrary data like lists or maps as String of the network.<!--more--></p>
<p>The followin Gist shows how to solve this by serializing a list or map as JSON or YAML. In addition, it
shows how Groovy does it an a very elegant and clean way.</p>
<p><script src="https://gist.github.com/rdmueller/793d262862270eda8d3a0b5c2e9e46da.js"></script></p>
]]></content></entry><entry><title type="html"><![CDATA[Jatumba!]]></title><link href="https://rdmueller.github.io/blog/2016/03/10/jatumba/"/><updated>2016-06-27T20:29:15+02:00</updated><id>/blog/2016/03/10/jatumba/</id><content type="html"><![CDATA[<p>Zwei Tage Javaland liegen gerade hinter mir. Zusammen mit <a href="https://twitter.com/tokraft">Tobias Kraft</a> hatte ich die tolle Gelegenheit unseren Vortrag über Spock und Geb nochmal vor einem größeren Publikum vorzutragen.<!--more--></p>
<p>Die zwei Tage waren natürlich vollgepackt mit Vorträgen, gutem Essen und guter Laune. Im Netzt gibt es schon einige gute Zusammenfassungen der Tage z.B. bei <a href="http://blog.exensio.de/2016/03/javaland-2016.html">exensio</a> und <a href="https://develishdevelopment.wordpress.com/2016/03/09/javaland-2016-conference-day-1/">develishdevelop</a>.</p>
<p>Für mich waren folgende Vorträge am interessantesten:</p>
<ul>
<li><a href="https://twitter.com/mittie">Dierk König</a> "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509525">Fun in GroovyLand</a>": Wie Tobias schon geschrieben hat, super Vortragsstil trotz ausgefallener Technik. Und @canonical + @builder haben sich bei mir als nützliche Annotation eingeprägt</li>
<li><a href="https://twitter.com/danielgrycman">Daniel Grycman</a> "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509701">Introduction to Agile Documentation</a>": selbst noch nicht gesehen, soll aber gut gewesen sein, da AsciiDoc ;-)</li>
<li><a href="https://twitter.com/mrhaki">MrHaki</a> "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509825">Writing Documentation with Asciidoctor Is Awesome</a>": Toller Vortragsstil mit Live-Coding über ein langes Asciidoc-Dokument</li>
<li>Andreas Knuth "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509726">PhantomJS - Schweizer Taschenmesser der WWW-Automatisierung</a>": Interessante Einblicke über die unter PhantomJS liegende Technologie und warum wir <a href="https://github.com/KDAB/phantomjs-cef">PhantomJS-CEF</a> brauchen.</li>
<li><a href="https://twitter.com/goldstift">Alexander Heusingfeld</a> und <a href="https://twitter.com/taval">Tammo van Lessen</a> "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509488">When Microservices Meet Real-World Projects: Lessons Learned</a>": Super Tipps und eine Leand-Deployment-Pipeline (Pull statt Push!) -> <a href="https://www.innoq.com/en/talks/2016/03/javaland-2016-microservices-lessons-learned/">Slides</a></li>
<li><a href="https://twitter.com/madmas">Markus Schlichting</a> "<a href="https://www.doag.org/konferenz/konferenzplaner/konferenzplaner_details.php?id=499959&amp;locS=0&amp;vid=509841">Token statt Cookies dank JWT</a>": genau, was ich gesucht habe, um meine JSESSIONID los zu werden! -> <a href="https://github.com/madmas/TokenVsCookies/tree/JavaLand2016">Slides</a></li>
</ul>
<table>
<tr>
<td>
<blockquote class="twitter-tweet" data-lang="de"><p lang="en" dir="ltr">Lots of people interested in Testing with Spock and Geb with <a href="https://twitter.com/tokraft">@tokraft</a> and <a href="https://twitter.com/RalfDMueller">@RalfDMueller</a> at <a href="https://twitter.com/hashtag/JavaLand?src=hash">#JavaLand</a> <a href="https://t.co/f7XBxrNHCl">pic.twitter.com/f7XBxrNHCl</a></p>&mdash; Florian Hopf (@fhopf) <a href="https://twitter.com/fhopf/status/707185245066547200">8. März 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></td>
<td>
<blockquote class="twitter-tweet" data-lang="de"><p lang="en" dir="ltr">Testing automated with <a href="https://twitter.com/hashtag/Selenium?src=hash">#Selenium</a> <a href="https://twitter.com/hashtag/WebDriver?src=hash">#WebDriver</a>, <a href="https://twitter.com/hashtag/Geb?src=hash">#Geb</a> and <a href="https://twitter.com/hashtag/Spock?src=hash">#Spock</a> demonstrated by <a href="https://twitter.com/tokraft">@tokraft</a> at <a href="https://twitter.com/hashtag/JavaLandConf?src=hash">#JavaLandConf</a> 👌 <a href="https://t.co/ssQBhCjtNj">pic.twitter.com/ssQBhCjtNj</a></p>&mdash; Markus ★ (@madmas) <a href="https://twitter.com/madmas/status/707181204261486592">8. März 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</td>
</tr>
</table>
<p><script async class="speakerdeck-embed" data-id="3e2e77dd039b45879579a7b6895e5203" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script></p>
<p>Wer den Vortrag verpasst hat, kann sich das Video vom Entwicklertag letzten Jahres nochmal ansehen:</p>
<p><iframe allowfullscreen="" frameborder="0"  src="https://www.youtube.com/embed/L75DdPon5Gk" width="720" height="480"></iframe></p>
]]></content></entry><entry><title type="html"><![CDATA[Domain Class Diagrams for Grails Projects]]></title><link href="https://rdmueller.github.io/blog/2015/08/14/domain-class-diagrams-for-grails-projects/"/><updated>2016-06-27T20:29:08+02:00</updated><id>/blog/2015/08/14/domain-class-diagrams-for-grails-projects/</id><content type="html"><![CDATA[<p>A Grails project can quickly grow into larger applications. In order to still keep an overview, some architecture documentation is quite useful. One of the most useful diagrams to dive into an application is the domain class diagrams which shows you how your business or domain object interact.<!--more--></p>
<p>There are a lot of tools on the market which let you analyze and reverse engineer your project in order to draw such a class diagram. They fall in two categories:</p>
<ul>
<li>Tools which automatically create and layout your diagram</li>
<li>Tools which let you manually enhance the diagram after discovering your classes</li>
</ul>
<p>For the first category, there are some Grails plugins which use tools like PlantUML to draw the needed diagrams right from within the Grails framework. That's great to get a quick overview, but since you can't easily enhance the diagrams with additional information or lay out the elements with your wisdom, I don't like them to create my project documentation.</p>
<p>There are great tools within the second categroy, but unfortunately, I am not aware of a single one which is capable of doing the trick for Groovy classes - only Java ones. Some of them are highly configurable and it would be possible to teach them how to work with Groovy. But the effort to do so is high. For Enterprise Architect by Sparx Systems, you need Groovy descirbe as EBNF - I am currently not aware of an EBNF description and it would be hard to create and maintain one by myself.</p>
<p>So what to do? Groovy already looks like Java and Grails knows about its domain classes. So my approach is to use a script which takes the knowledge about the domain classes available within grails and creates Java classes from it.</p>
<p>These classes then can be easily fed into whatever UML tool you chose. As Result, you will have</p>
<ul>
<li>an easy way to export and synchronize your Grails domain classes to any UML tool capable of analyzing Java sources</li>
<li>depending on you Tool, you are free to manually add your knowledge and lay out the diagrams as you like</li>
<li>most tools keep your manual layout and additions even when you re-synchronize the diagrams with your code</li>
</ul>
<h2>Details of the Solution</h2>
<p>As already mentioned, I use the information already available in Grails. In order to do so, I wrote a Grails script which is invoked from the command line. The following Gist shows you the code.</p>
<p><script src="https://gist.github.com/rdmueller/acee3a5db5ea3273652b.js"></script></p>
<p>Unfortunately, Grails only knows about the code, not the comments which are available within the source. So I added a little dirty hack which fetches the source of the domain class and extracts the first comment - hopefully the description of the domain class - and adds it to the java sources.</p>
<p>In order to make it even more convenient, you can check out your UML-Tool and see if it let's you automate the synchronisation with your generated code.</p>
<h2>Example</h2>
<p>Here is an example diagram for the <a href="https://github.com/grails-samples/grails-petclinic">Grails PetClinic sample application</a> created with <a href="http://sparxsystems.com/">Enterprise Architect</a>.</p>
<div style="text-align: center;">
<img src="../images/petclinic.png" style="max-width:100%;" />
</div>
]]></content></entry><entry><title type="html"><![CDATA[Spock-Reports for Grails 2.5]]></title><link href="https://rdmueller.github.io/blog/2015/07/16/spock-reports-for-grails-2-5/"/><updated>2016-06-27T20:29:01+02:00</updated><id>/blog/2015/07/16/spock-reports-for-grails-2-5/</id><content type="html"><![CDATA[<p>In two previous posts (<a href="https://rdmueller.github.io/Spock-Reports-with-Grails-3.0/">Grails3.0</a> &amp; <a href="https://rdmueller.github.io/Spock-Reports-with-Grails-2.2/">Grails2.2</a>) I described how to use <a href="https://github.com/renatoathaydes/spock-reports">Spock-Reports</a> with <a href="http://www.grails.org">Grails 3.0</a> and Grails 2.2.<!--more--></p>
<p>Now, if you try to use it with Grails 2.5, it seems not to work from the start. The main problem I noticed was that even
when I run a trivial app and all spock tests are auto-created, I got an error message at the end of the tests:
http://stackoverflow.com/questions/31440381/forked-grails-vm-exited-with-error-while-running-test-app#comment50863764_31440381</p>
<p>So I tried to get rid of this error message by not forking the VM when running tests. To do that, simply set the fork-configuration
to <code>false</code> for the test environments (in <code>BuildConfig.groovy</code>)</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">grails</span><span class="o">.</span><span class="na">project</span><span class="o">.</span><span class="na">fork</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="nl">test:</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now, the rest seems to work the same as with Grails 2.2.4 with the only difference that Grails 2.5 uses Spock out of the box.
So we don't habe to configure it:</p>
<p>just open your <code>grails-app/conf/BuildConfig.groovy</code> file and add</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">[...]</span>
</span><span class='line'>  <span class="c1">//for spock-reports</span>
</span><span class='line'>  <span class="n">mavenRepo</span> <span class="s2">&quot;http://jcenter.bintray.com&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>to the <code>repositories</code> section and</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">[...]</span>
</span><span class='line'>  <span class="c1">//for spock-reports</span>
</span><span class='line'>  <span class="n">test</span> <span class="s1">&#39;com.athaydes:spock-reports:1.2.5&#39;</span>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>to the <code>dependencies</code> section.</p>
<p>The standard reports are now generated and stored in <code>build/spock-reports/.</code>.</p>
<h3>Customizing your Reports</h3>
<p>In order to store the generated reports in <code>target/test-reports/spock/.</code> you have to customize your reports as described in the <a href="https://github.com/renatoathaydes/spock-reports#customizing-the-reports">documentation</a>, you have to create a file called <code>META-INF/services/com.athaydes.spockframework.report.IReportCreator.properties</code>.
That sounds easier than it is, because it has to be in the classpath and for some Grails projects, it's not easy to find the right folder to put it.</p>
<p>For Grails 2.5, you will succeed by putting it in <code>grails-app/conf/META-INF/services/com.athaydes.spockframework.report.IReportCreator.properties</code>.</p>
<p>Here is a sample file which uses the template based reports:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="err">#</span> <span class="n">Name</span> <span class="n">of</span> <span class="n">the</span> <span class="n">implementation</span> <span class="kd">class</span> <span class="nc">of</span> <span class="n">the</span> <span class="n">report</span> <span class="n">creator</span>
</span><span class='line'><span class="err">#</span> <span class="n">Currently</span> <span class="n">supported</span> <span class="n">classes</span> <span class="nl">are:</span>
</span><span class='line'><span class="err">#</span>   <span class="mi">1</span><span class="o">.</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">HtmlReportCreator</span>
</span><span class='line'><span class="err">#</span>   <span class="mi">2</span><span class="o">.</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">IReportCreator</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">Output</span> <span class="n">directory</span> <span class="o">(</span><span class="n">where</span> <span class="n">the</span> <span class="n">spock</span> <span class="n">reports</span> <span class="n">will</span> <span class="n">be</span> <span class="n">created</span><span class="o">)</span> <span class="o">-</span> <span class="n">relative</span> <span class="n">to</span> <span class="n">working</span> <span class="n">directory</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">outputDir</span><span class="o">=</span><span class="n">target</span><span class="s">/test-reports/</span><span class="n">spock</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">If</span> <span class="n">set</span> <span class="n">to</span> <span class="kc">true</span><span class="o">,</span> <span class="n">hides</span> <span class="n">blocks</span> <span class="n">which</span> <span class="k">do</span> <span class="n">not</span> <span class="n">have</span> <span class="n">any</span> <span class="n">description</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">hideEmptyBlocks</span><span class="o">=</span><span class="kc">false</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">Set</span> <span class="n">properties</span> <span class="n">of</span> <span class="n">the</span> <span class="n">report</span> <span class="n">creator</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">specTemplateFile</span><span class="o">=</span><span class="s">/spockreporttemplate/</span><span class="n">spec</span><span class="o">-</span><span class="n">template</span><span class="o">.</span><span class="na">md</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">reportFileExtension</span><span class="o">=</span><span class="n">md</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">summaryTemplateFile</span><span class="o">=</span><span class="s">/spockreporttemplate/</span><span class="n">summary</span><span class="o">-</span><span class="n">template</span><span class="o">.</span><span class="na">md</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">summaryFileName</span><span class="o">=</span><span class="n">summary</span><span class="o">.</span><span class="na">md</span>
</span></code></pre></td></tr></table></div></figure>
<p>this file specifies that the templates are located in <code>grails-app/conf/spockreporttemplates</code> and the output
will be written to <code>target/test-reports/spock</code>. A good idea is to start with the default templates <a href="https://github.com/renatoathaydes/spock-reports/blob/master/src/main/resources/templateReportCreator/spec-template.md">spec-template.md</a> and <a href="https://github.com/renatoathaydes/spock-reports/blob/master/src/main/resources/templateReportCreator/summary-template.md">summary-template.md</a></p>
<p>You might want to use this https://github.com/rdmueller/Grails2.5-Spock-Reports-Sample as a starting point...</p>
]]></content></entry><entry><title type="html"><![CDATA[Spock-Reports for Grails 2.2]]></title><link href="https://rdmueller.github.io/blog/2015/07/14/spock-reports-for-grails-2-2/"/><updated>2016-06-27T20:28:54+02:00</updated><id>/blog/2015/07/14/spock-reports-for-grails-2-2/</id><content type="html"><![CDATA[<p>In a <a href="https://rdmueller.github.io/Spock-Reports-with-Grails-3.0/">previous post</a> I described how to use <a href="https://github.com/renatoathaydes/spock-reports">Spock-Reports</a> with <a href="http://www.grails.org">Grails 3.0</a>.<!--more--></p>
<p>That was easy since Grails 3.0 is Gradle based.</p>
<p>Now I will try to figure out how to use Spock-Reports with Grails 2.2.4 .</p>
<p>Again, the configuration of the dependencies is easy: just open your <code>grails-app/conf/BuildConfig.groovy</code> file and add</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">[...]</span>
</span><span class='line'>  <span class="c1">//for spock-reports</span>
</span><span class='line'>  <span class="n">mavenRepo</span> <span class="s2">&quot;http://jcenter.bintray.com&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>to the <code>repositories</code> section and</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">[...]</span>
</span><span class='line'>  <span class="c1">//for spock-reports</span>
</span><span class='line'>  <span class="n">test</span> <span class="s1">&#39;com.athaydes:spock-reports:1.2.5&#39;</span>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>to the <code>dependencies</code> section. But since Grails 2.2.4 does not include Spock be default, we also have to follow the
<a href="https://grails.org/plugin/spock">documentation for the Grails-Spock-Plugin</a> and add in addition</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">plugins</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">[...]</span>
</span><span class='line'>	<span class="n">test</span><span class="o">(</span><span class="s2">&quot;:spock:0.7&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>	    <span class="c1">//since we use groovy 2.x with grails 2.2.4</span>
</span><span class='line'>      	    <span class="n">exclude</span> <span class="s2">&quot;spock-grails-support&quot;</span>
</span><span class='line'>    	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>to the plugins section and</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">[...]</span>
</span><span class='line'>  <span class="n">test</span> <span class="s1">&#39;org.spockframework:spock-grails-support:0.7-groovy-2.0&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>to the dependencies section. Now, that should do the trick. The standard reports are now generated and stored in <code>build/spock-reports/.</code>.</p>
<h3>Customizing your Reports</h3>
<p>In order to store the generated reports in <code>target/test-reports/spock/.</code> you have to customize your reports as described in the <a href="https://github.com/renatoathaydes/spock-reports#customizing-the-reports">documentation</a>, you have to create a file called <code>META-INF/services/com.athaydes.spockframework.report.IReportCreator.properties</code>.
That sounds easier than it is, because it has to be in the classpath and for some Grails projects, it's not easy to find the right folder to put it.</p>
<p>For Grails 2.2.4, you will succeed by putting it in <code>grails-app/conf/META-INF/services/com.athaydes.spockframework.report.IReportCreator.properties</code>.</p>
<p>Here is a sample file which uses the template based reports:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="err">#</span> <span class="n">Name</span> <span class="n">of</span> <span class="n">the</span> <span class="n">implementation</span> <span class="kd">class</span> <span class="nc">of</span> <span class="n">the</span> <span class="n">report</span> <span class="n">creator</span>
</span><span class='line'><span class="err">#</span> <span class="n">Currently</span> <span class="n">supported</span> <span class="n">classes</span> <span class="nl">are:</span>
</span><span class='line'><span class="err">#</span>   <span class="mi">1</span><span class="o">.</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">HtmlReportCreator</span>
</span><span class='line'><span class="err">#</span>   <span class="mi">2</span><span class="o">.</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">IReportCreator</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">Output</span> <span class="n">directory</span> <span class="o">(</span><span class="n">where</span> <span class="n">the</span> <span class="n">spock</span> <span class="n">reports</span> <span class="n">will</span> <span class="n">be</span> <span class="n">created</span><span class="o">)</span> <span class="o">-</span> <span class="n">relative</span> <span class="n">to</span> <span class="n">working</span> <span class="n">directory</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">outputDir</span><span class="o">=</span><span class="n">target</span><span class="s">/test-reports/</span><span class="n">spock</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">If</span> <span class="n">set</span> <span class="n">to</span> <span class="kc">true</span><span class="o">,</span> <span class="n">hides</span> <span class="n">blocks</span> <span class="n">which</span> <span class="k">do</span> <span class="n">not</span> <span class="n">have</span> <span class="n">any</span> <span class="n">description</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">hideEmptyBlocks</span><span class="o">=</span><span class="kc">false</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">Set</span> <span class="n">properties</span> <span class="n">of</span> <span class="n">the</span> <span class="n">report</span> <span class="n">creator</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">specTemplateFile</span><span class="o">=</span><span class="s">/spockreporttemplate/</span><span class="n">spec</span><span class="o">-</span><span class="n">template</span><span class="o">.</span><span class="na">md</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">reportFileExtension</span><span class="o">=</span><span class="n">md</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">summaryTemplateFile</span><span class="o">=</span><span class="s">/spockreporttemplate/</span><span class="n">summary</span><span class="o">-</span><span class="n">template</span><span class="o">.</span><span class="na">md</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">summaryFileName</span><span class="o">=</span><span class="n">summary</span><span class="o">.</span><span class="na">md</span>
</span></code></pre></td></tr></table></div></figure>
<p>this file specifies that the templates are located in <code>grails-app/conf/spockreporttemplates</code> and the output
will be written to <code>target/test-reports/spock</code>. A good idea is to start with the default templates <a href="https://github.com/renatoathaydes/spock-reports/blob/master/src/main/resources/templateReportCreator/spec-template.md">spec-template.md</a> and <a href="https://github.com/renatoathaydes/spock-reports/blob/master/src/main/resources/templateReportCreator/summary-template.md">summary-template.md</a></p>
<p>You might want to use this https://github.com/rdmueller/Grails2.2-Spock-Reports-Sample as a starting point...</p>
]]></content></entry><entry><title type="html"><![CDATA[A Fool with a Tool is still a Fool...]]></title><link href="https://rdmueller.github.io/blog/2015/07/12/a-fool-with-a-tool-is-still-a-fool/"/><updated>2016-06-27T20:28:47+02:00</updated><id>/blog/2015/07/12/a-fool-with-a-tool-is-still-a-fool/</id><content type="html"><![CDATA[<p>...but sometimes the tool makes a difference!<!--more--></p>
<p>I just came back from an interesting 3 day workshop on which I had a first
chance to make use of my drawing equipment I bought recently. Originally, I wanted to draw some slides for my talk at
<a href="https://rdmueller.github.io/etka/">Entwicklertag Karlsruhe</a> but we later dropped the idea in favour of professional clip art.</p>
<p>But since we've had a flip chart available at the workshop and I thought that creating power point slides would take too much
time when only 3 days are available, I gave it a try:</p>
<div style="text-align: center;">
<img src="../images/bikablo-Example.png" style="width:100%;" />
<span style="font-size: smaller;">Diese Abbildung wurde inspiriert durch die bikablo® Publikationen, www.kommunikationslotsen.de</span>
</div>
<p>I used my <a href="http://de.neuland.com/marker-und-stifte/neuland-marker/fineone-by-neuland-artmarker-pinselpitze-13er-farbset.html?c=725">neuland "fine One" set of artmarkers</a>
and my <a href="http://bikablo.kommunikationslotsen.de/bikablo-produkte/">bikablo-books</a> with lot's of ideas on how to visualize ideas and then started to draw. The feedback I've got was great!</p>
<p>The "fine One" markers are not the best for a flip chart - they are designed for smaller format, but the do work on larger formats too.
The brush tip gives your drawings a professional look which is visibly different from standard flip chart markers. The different light colors enable you to colorize your visualisations and give them the finishing touch.</p>
<p>Btw: after I had my first results with the artmarkers, I bought myself a Wacom Intuos drawing tablet (<a href="http://www.wacom.com/en-gb/products/pen-tablets/intuos-pen-and-touch-small">CTH-480</a>) and searched for good and affordable drawing software to recrate the effects I created with the artmakers. I found <a href="https://inkscape.org/">InkScape</a> to be the most convenient and free tool. This is the result:</p>
<div style="text-align: center;">
<img src="../images/bikablo-Example-tablet.png" style="width:100%;" />
<span style="font-size: smaller;">Diese Abbildung wurde inspiriert durch die bikablo® Publikationen, www.kommunikationslotsen.de</span>
</div>
<p>If you have any hints on how to get better results (I guess there is better software :-) please tell me!</p>
]]></content></entry><entry><title type="html"><![CDATA[Spock-Reports for Grails 3.0]]></title><link href="https://rdmueller.github.io/blog/2015/07/11/spock-reports-for-grails-3-0/"/><updated>2016-06-27T20:28:39+02:00</updated><id>/blog/2015/07/11/spock-reports-for-grails-3-0/</id><content type="html"><![CDATA[<p><a href="https://github.com/renatoathaydes/spock-reports">Spock-Reports</a> is a great way to create better reports for <a href="https://github.com/spockframework/spock">Spock</a>.<!--more--></p>
<p>Since Grails 3.0 is based on Gradle, integrating the Spock-Reports is easy. Just open your <code>build.gradle</code> file and add</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">[...]</span>
</span><span class='line'>  <span class="c1">//for spock-reports</span>
</span><span class='line'>  <span class="n">jcenter</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>to the <code>repositories</code> section and</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">[...]</span>
</span><span class='line'>  <span class="c1">//for spock-reports</span>
</span><span class='line'>  <span class="n">testCompile</span> <span class="s1">&#39;com.athaydes:spock-reports:1.2.5&#39;</span>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>to the <code>dependencies</code> section.</p>
<p>that's it... The next time you run <code>grails test-app</code>, you'll find the generated Spock-Reports in <code>/build/spock-reports/</code></p>
<h3>Customizing your Reports</h3>
<p>If you want to customize your reports as described in the <a href="https://github.com/renatoathaydes/spock-reports#customizing-the-reports">documentation</a>, you have to create a file called <code>META-INF/services/com.athaydes.spockframework.report.IReportCreator.properties</code>. That sounds easier than it is, because it has to be in the classpath and for some Grails projects, it's not easy to find the right folder to put it.</p>
<p>For Grails 3.0, you will succeed by putting it in <code>src/test/resources/META-INF/services/com.athaydes.spockframework.report.IReportCreator.properties</code>.</p>
<p>Here is a sample file which uses the template based reports:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="err">#</span> <span class="n">Name</span> <span class="n">of</span> <span class="n">the</span> <span class="n">implementation</span> <span class="kd">class</span> <span class="nc">of</span> <span class="n">the</span> <span class="n">report</span> <span class="n">creator</span>
</span><span class='line'><span class="err">#</span> <span class="n">Currently</span> <span class="n">supported</span> <span class="n">classes</span> <span class="nl">are:</span>
</span><span class='line'><span class="err">#</span>   <span class="mi">1</span><span class="o">.</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">HtmlReportCreator</span>
</span><span class='line'><span class="err">#</span>   <span class="mi">2</span><span class="o">.</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">IReportCreator</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">Output</span> <span class="n">directory</span> <span class="o">(</span><span class="n">where</span> <span class="n">the</span> <span class="n">spock</span> <span class="n">reports</span> <span class="n">will</span> <span class="n">be</span> <span class="n">created</span><span class="o">)</span> <span class="o">-</span> <span class="n">relative</span> <span class="n">to</span> <span class="n">working</span> <span class="n">directory</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">outputDir</span><span class="o">=</span><span class="n">build</span><span class="s">/spock-reports-mds</span>
</span><span class='line'>
</span><span class='line'><span class="s"># If set to true, hides blocks which do not have any description</span>
</span><span class='line'><span class="s">com.athaydes.spockframework.report.hideEmptyBlocks=false</span>
</span><span class='line'>
</span><span class='line'><span class="s"># Set properties of the report creator</span>
</span><span class='line'><span class="s">com.athaydes.spockframework.report.template.TemplateReportCreator.specTemplateFile=/</span><span class="n">spockreporttemplate</span><span class="s">/spec-template.md</span>
</span><span class='line'><span class="s">com.athaydes.spockframework.report.template.TemplateReportCreator.reportFileExtension=md</span>
</span><span class='line'><span class="s">com.athaydes.spockframework.report.template.TemplateReportCreator.summaryTemplateFile=/</span><span class="n">spockreporttemplate</span><span class="o">/</span><span class="n">summary</span><span class="o">-</span><span class="n">template</span><span class="o">.</span><span class="na">md</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">summaryFileName</span><span class="o">=</span><span class="n">summary</span><span class="o">.</span><span class="na">md</span>
</span></code></pre></td></tr></table></div></figure>
<p>this file specifies that the templates are located in <code>src/test/resources/spockreporttemplates</code>. A good idea is to start with the default templates <a href="https://github.com/renatoathaydes/spock-reports/blob/master/src/main/resources/templateReportCreator/spec-template.md">spec-template.md</a> and <a href="https://github.com/renatoathaydes/spock-reports/blob/master/src/main/resources/templateReportCreator/summary-template.md">summary-template.md</a></p>
<p>You might want to use this https://github.com/rdmueller/Grails3.0-Spock-Reports-Sample as a starting point...</p>
]]></content></entry><entry><title type="html"><![CDATA[Spock und Geb - Übersichtlich und nachvollziehbar Testen für alle!]]></title><link href="https://rdmueller.github.io/blog/2015/07/05/spock-und-geb-ubersichtlich-und-nachvollziehbar-testen-fur-alle/"/><updated>2016-06-27T20:28:26+02:00</updated><id>/blog/2015/07/05/spock-und-geb-ubersichtlich-und-nachvollziehbar-testen-fur-alle/</id><content type="html"><![CDATA[<p>Auf dem Entwicklertag Karlsruhe hatte ich zusammen mit Tobias Kraft mal wieder die Möglichkeit meine Ideen in einem Vortrag
zu präsentieren. Mittlerweile ist sogar das Video zum <a href="https://entwicklertag.de/karlsruhe/2015/spock-und-geb-bersichtlich-und-nachvollziehbar-testen-f-r-alle">Vortrag</a> online.<!--more--></p>
<p>In dem Vortrag geht es darum, wie man bei der Entwicklung einer webbasierten Anwendung zusammen mit dem Kunden (Product Owner) eine "Testfahrt" der Applikation planen, automatisch ausführen und einen aussagekräftigen Report erstellen kann.</p>
<p>Viel Spass beim ansehen!</p>
<p><iframe allowfullscreen="" frameborder="0"  src="https://www.youtube.com/embed/L75DdPon5Gk" width="720" height="480"></iframe></p>
<p><script async class="speakerdeck-embed" data-id="a5e3259364ba4c1dafc4a89890209bf2" data-ratio="1.41436464088398" src="//speakerdeck.com/assets/embed.js"></script></p>
]]></content></entry><entry><title type="html"><![CDATA[Report what you didn't test!]]></title><link href="https://rdmueller.github.io/blog/2015/05/20/report-what-you-didn-t-test/"/><updated>2016-06-27T20:28:17+02:00</updated><id>/blog/2015/05/20/report-what-you-didn-t-test/</id><content type="html"><![CDATA[<p>Currently the "Entwicklertag Karlsruhe 2015" takes place where Gebhard Ebeling together with Mario Krahmer today presented their
idea to report what hasn't been tested :-) (session "Mut zur Lücke? Testlücken zur Risikobewertung nutzen")<!--more--></p>
<p>When you create automated tests, you always try to report what has been tested. That makes sense. Ebeling and Krahmer are one step ahead -
they also report what hasn't been tested. The definition of this is not trivial, but possible:</p>
<p>If you know your application, you already know which modules should be tested. When I think of Spock, this gives you the chance to
specify an empty spec for each module. A great placeholder and reminder "there is still room to improve your tests!".
The standard spock report does not distinguish between empty and implemented specs, but with the template version of the Spock-Reports
plugin, you can change the report to reflect this.</p>
<p>If your projects does have a production owner or some role alike who specifies tests before they are implemented, you can
even create specs with the empty/not implemented business spec of your tests. Mark them with the @Ignore("not implemented")
annotation and you'll see them as skipped tests in your report. This gives you a perfect overview on how many tests are not
implemented yet and thus what hasn't been tested.</p>
]]></content></entry><entry><title type="html"><![CDATA[Spock-Reports with Templates]]></title><link href="https://rdmueller.github.io/blog/2015/03/15/spock-reports-with-templates/"/><updated>2016-06-27T20:28:04+02:00</updated><id>/blog/2015/03/15/spock-reports-with-templates/</id><content type="html"><![CDATA[<p>The new template engine for the Spock-Reports-Plugin is out. Let's build an asciidoc template with it.<!--more--></p>
<h3>Step 1: configure the plugin</h3>
<p>Renato describes this step in detail on the <a href="https://github.com/renatoathaydes/spock-reports">Plugin Homepage</a>. I've placed the properties file in <code>src/test/resources/main/META-INF/services/</code> and so I place my templates also in <code>src/test/resources/spockreporttemplate/</code></p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">specTemplateFile</span><span class="o">=</span><span class="s">/spockreporttemplate/</span><span class="n">spec</span><span class="o">-</span><span class="n">template</span><span class="o">.</span><span class="na">ad</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">reportFileExtension</span><span class="o">=</span><span class="n">ad</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">summaryTemplateFile</span><span class="o">=</span><span class="s">/spockreporttemplate/</span><span class="n">summary</span><span class="o">-</span><span class="n">template</span><span class="o">.</span><span class="na">ad</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">template</span><span class="o">.</span><span class="na">TemplateReportCreator</span><span class="o">.</span><span class="na">summaryFileName</span><span class="o">=</span><span class="n">summary</span><span class="o">.</span><span class="na">ad</span>
</span></code></pre></td></tr></table></div></figure>
<p>Just to get started, I placed two emtpy files <code>spec-template.ad</code> and <code>summary-template.ad</code> at the right location and ran my tests just to see that those empty templates are picked up.</p>
<h3>Step 2: create a summary template</h3>
<p>I'll start with the summary report. It seems to be the easier one. Renato already provided a <a href="https://raw.githubusercontent.com/renatoathaydes/spock-reports/master/src/main/resources/templateReportCreator/summary-template.md">markdown sample</a>, so let's take a look at it to see the data which is available to the template.</p>
<p>So it seems that we have a convinience function (<code>aggregateStats</code>) which creates some statistical data about our test runs and the <code>data</code> object itself.</p>
<p>Let's modify the empty template in order to output both data structures:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;%</span> <span class="kt">def</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Utils</span><span class="o">.</span><span class="na">aggregateStats</span><span class="o">(</span> <span class="n">data</span> <span class="o">)</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">inspect</span><span class="o">()}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
</span><span class='line'><span class="n">$</span><span class="o">{</span><span class="n">data</span><span class="o">.</span><span class="na">inspect</span><span class="o">()}</span>
</span></code></pre></td></tr></table></div></figure>
<p>which leads to the following output: (a little bit reformatted for better readability)</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span><span class="s1">&#39;total&#39;</span><span class="o">:</span><span class="mi">13</span><span class="o">,</span> <span class="s1">&#39;passed&#39;</span><span class="o">:</span><span class="mi">13</span><span class="o">,</span> <span class="s1">&#39;failed&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;fFails&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;fErrors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mf">258.0</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;DatabaseDrivenSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">1</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">67</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;DataDrivenSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">3</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">19</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;DerivedSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">2</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">16</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;EmptyStackSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">4</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">20</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;HamcrestMatchersSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">1</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">21</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;HelloSpockSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">1</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">3</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;IncludeExcludeExtensionSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">3</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">3</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;OrderedInteractionsSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">1</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">49</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;PublisherSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">2</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">24</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;StackWithOneElementSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">4</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">4</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;StackWithThreeElementsSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">4</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">7</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;StepwiseExtensionSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">3</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">4</span><span class="o">],</span> 
</span><span class='line'>	<span class="s1">&#39;UsingJUnitRulesSpec&#39;</span><span class="o">:[</span><span class="s1">&#39;failures&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;errors&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;skipped&#39;</span><span class="o">:</span><span class="mi">0</span><span class="o">,</span> <span class="s1">&#39;totalRuns&#39;</span><span class="o">:</span><span class="mi">1</span><span class="o">,</span> <span class="s1">&#39;successRate&#39;</span><span class="o">:</span><span class="mf">1.0</span><span class="o">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span><span class="mi">21</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>That's great! We get hashmaps which can be easily inspected. That will make it even easier to write a template.</p>
<p>Now let's come up with the real template:</p>
<h4>summary-template.ad:</h4>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;%</span> <span class="kt">def</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Utils</span><span class="o">.</span><span class="na">aggregateStats</span><span class="o">(</span> <span class="n">data</span> <span class="o">)</span>
</span><span class='line'> <span class="o">%&gt;=</span> <span class="n">Specification</span> <span class="n">run</span> <span class="n">results</span>
</span><span class='line'>
</span><span class='line'><span class="o">==</span> <span class="n">Specifications</span> <span class="n">summary</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">small</span><span class="o">&gt;</span><span class="err">#</span><span class="n">created</span> <span class="n">on</span> <span class="n">$</span><span class="o">{</span><span class="k">new</span> <span class="n">Date</span><span class="o">()}</span> <span class="n">by</span> <span class="n">$</span><span class="o">{</span><span class="n">System</span><span class="o">.</span><span class="na">properties</span><span class="o">[</span><span class="s1">&#39;user.name&#39;</span><span class="o">]}</span><span class="err">#</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="na">summary</span>
</span><span class='line'><span class="o">[</span><span class="n">options</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">|==================================================================================================================================</span>
</span><span class='line'><span class="o">|</span> <span class="n">Total</span>          <span class="o">|</span> <span class="n">Passed</span>          <span class="o">|</span> <span class="n">Failed</span>          <span class="o">|</span> <span class="n">Feature</span> <span class="n">failures</span> <span class="o">|</span> <span class="n">Feature</span> <span class="n">errors</span>   <span class="o">|</span> <span class="n">Success</span> <span class="n">rate</span>        <span class="o">|</span> <span class="n">Total</span> <span class="n">time</span> <span class="o">(</span><span class="n">ms</span><span class="o">)</span> 
</span><span class='line'><span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">total</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">passed</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">failed</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">fFails</span><span class="o">}</span>  <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">fErrors</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">successRate</span><span class="o">}|</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">time</span><span class="o">}</span>   
</span><span class='line'><span class="o">|==================================================================================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="o">==</span> <span class="n">Specifications</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">options</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">|===================================================================</span>
</span><span class='line'><span class="o">|</span><span class="n">Name</span>  <span class="o">|</span> <span class="n">Features</span> <span class="o">|</span> <span class="n">Failed</span> <span class="o">|</span> <span class="n">Errors</span> <span class="o">|</span> <span class="n">Skipped</span> <span class="o">|</span> <span class="n">Success</span> <span class="n">rate</span> <span class="o">|</span> <span class="n">Time</span> 
</span><span class='line'><span class="o">&lt;%</span> <span class="n">data</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">name</span><span class="o">,</span> <span class="n">map</span> <span class="o">-&gt;</span>
</span><span class='line'> <span class="o">%&gt;|</span> <span class="n">$name</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">totalRuns</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">failures</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">errors</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">skipped</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">successRate</span><span class="o">}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">time</span><span class="o">}</span> 
</span><span class='line'><span class="o">&lt;%</span> <span class="o">}</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="o">|===================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">small</span><span class="o">]</span><span class="err">#</span><span class="n">generated</span> <span class="n">by</span> <span class="n">$</span><span class="o">{</span><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">SpockReportExtension</span><span class="o">.</span><span class="na">PROJECT_URL</span><span class="o">}[</span><span class="n">Athaydes</span> <span class="n">Spock</span> <span class="n">Reports</span><span class="o">]</span><span class="err">#</span>
</span></code></pre></td></tr></table></div></figure>
<p>Since MarkDown and AsciiDoc do not differ too much for this template, this was easy! Details regarding the formatting can be solved later...</p>
<p>To check the correct asciidoc syntax, you can simply copy and paste the result to the asciidoc live editor https://asciidoclive.com/</p>
<h3>Step 3: create a spec template</h3>
<p>Now let's do the same with the spec template. First try to figure out what data we will have available.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">$</span><span class="o">{</span><span class="n">data</span><span class="o">.</span><span class="na">dump</span><span class="o">()}</span>
</span></code></pre></td></tr></table></div></figure>
<p>but this time, the dump does not give us such a good result: (reformatted for readability)</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">SpecData</span><span class="err">@</span><span class="mi">5</span><span class="n">de17399</span> 
</span><span class='line'><span class="n">info</span><span class="o">=</span><span class="n">org</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">runtime</span><span class="o">.</span><span class="na">model</span><span class="o">.</span><span class="na">SpecInfo</span><span class="err">@</span><span class="mi">7</span><span class="n">c6c71f5</span>
</span><span class='line'><span class="n">featureRuns</span><span class="o">=[</span>
</span><span class='line'>	<span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">FeatureRun</span><span class="err">@</span><span class="mi">33</span><span class="n">adcba4</span><span class="o">,</span>
</span><span class='line'>	<span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">FeatureRun</span><span class="err">@</span><span class="mi">5714967</span><span class="n">d</span><span class="o">,</span>
</span><span class='line'>	<span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">FeatureRun</span><span class="err">@</span><span class="mi">8</span><span class="n">a41535</span>
</span><span class='line'>	<span class="o">]</span> 
</span><span class='line'><span class="n">totalTime</span><span class="o">=</span><span class="mi">10</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>We can only see the different java object within the dump and not the full data structure. Since I don't like to go to the source of those structure and analyze it, I now take the MarkDown sample template and start to transform it right away. This should lead to a solution which will fit for the moment:</p>
<h4>spec-template.ad:</h4>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;%</span>  <span class="kt">def</span> <span class="n">fmt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">StringFormatHelper</span><span class="o">()</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Utils</span><span class="o">.</span><span class="na">stats</span><span class="o">(</span> <span class="n">data</span> <span class="o">)</span>
</span><span class='line'> <span class="o">%&gt;==</span> <span class="n">Report</span> <span class="k">for</span> <span class="n">$</span><span class="o">{</span><span class="n">data</span><span class="o">.</span><span class="na">info</span><span class="o">.</span><span class="na">description</span><span class="o">.</span><span class="na">className</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">===</span> <span class="n">Summary</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">cols</span><span class="o">=</span><span class="s2">&quot;asciidoc,asciidoc&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">|====</span>
</span><span class='line'><span class="o">|*</span> <span class="n">Total</span> <span class="nl">Runs:</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">totalRuns</span><span class="o">}</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Success</span> <span class="nl">Rate:</span> <span class="n">$</span><span class="o">{</span><span class="n">fmt</span><span class="o">.</span><span class="na">toPercentage</span><span class="o">(</span><span class="n">stats</span><span class="o">.</span><span class="na">successRate</span><span class="o">)}</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Total</span> <span class="nl">time:</span> <span class="n">$</span><span class="o">{</span><span class="n">fmt</span><span class="o">.</span><span class="na">toTimeDuration</span><span class="o">(</span><span class="n">stats</span><span class="o">.</span><span class="na">time</span><span class="o">)}</span>
</span><span class='line'><span class="o">|*</span> <span class="nl">Failures:</span> <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">failures</span><span class="o">}</span>
</span><span class='line'> <span class="o">*</span> <span class="nl">Errors:</span>   <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">errors</span><span class="o">}</span>
</span><span class='line'> <span class="o">*</span> <span class="nl">Skipped:</span>  <span class="n">$</span><span class="o">{</span><span class="n">stats</span><span class="o">.</span><span class="na">skipped</span><span class="o">}</span>
</span><span class='line'><span class="o">|====</span>
</span><span class='line'>
</span><span class='line'><span class="o">===</span> <span class="n">Features</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'>    <span class="n">features</span><span class="o">.</span><span class="na">forEach</span> <span class="o">{</span> <span class="n">name</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="n">blocks</span><span class="o">,</span> <span class="n">iterations</span><span class="o">,</span> <span class="n">params</span> <span class="o">-&gt;</span>
</span><span class='line'><span class="o">%&gt;</span>
</span><span class='line'><span class="o">====</span> <span class="n">$name</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Result:</span> <span class="o">**</span><span class="n">$result</span><span class="o">**</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span> <span class="n">block</span> <span class="k">in</span> <span class="n">blocks</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="o">%&gt;</span>
</span><span class='line'><span class="o">*</span> <span class="n">$</span><span class="o">{</span><span class="n">block</span><span class="o">.</span><span class="na">kind</span><span class="o">}</span> <span class="n">$</span><span class="o">{</span><span class="n">block</span><span class="o">.</span><span class="na">text</span><span class="o">}</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kt">def</span> <span class="n">executedIterations</span> <span class="o">=</span> <span class="n">iterations</span><span class="o">.</span><span class="na">findAll</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">dataValues</span> <span class="o">||</span> <span class="n">it</span><span class="o">.</span><span class="na">errors</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">params</span> <span class="o">&amp;&amp;</span> <span class="n">executedIterations</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="o">%&gt;</span>
</span><span class='line'><span class="o">[</span><span class="n">options</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">|====</span>
</span><span class='line'><span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">params</span><span class="o">.</span><span class="na">join</span><span class="o">(</span> <span class="s1">&#39; | &#39;</span> <span class="o">)}</span> <span class="o">|</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span> <span class="n">iteration</span> <span class="k">in</span> <span class="n">executedIterations</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">%&gt;|</span> <span class="n">$</span><span class="o">{</span><span class="n">iteration</span><span class="o">.</span><span class="na">dataValues</span><span class="o">.</span><span class="na">join</span><span class="o">(</span> <span class="s1">&#39; | &#39;</span> <span class="o">)}</span> <span class="o">|</span> <span class="n">$</span><span class="o">{</span><span class="n">iteration</span><span class="o">.</span><span class="na">errors</span> <span class="o">?</span> <span class="s1">&#39;(FAIL)&#39;</span> <span class="o">:</span> <span class="s1">&#39;(PASS)&#39;</span><span class="o">}</span>
</span><span class='line'><span class="o">&lt;%</span>          <span class="o">}</span> 
</span><span class='line'><span class="o">%&gt;|====</span>
</span><span class='line'><span class="o">&lt;%</span>      <span class="o">}</span>
</span><span class='line'>        <span class="kt">def</span> <span class="n">problems</span> <span class="o">=</span> <span class="n">executedIterations</span><span class="o">.</span><span class="na">findAll</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">errors</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">problems</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;\nThe following problems occurred:\n\n&quot;</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span> <span class="n">badIteration</span> <span class="k">in</span> <span class="n">problems</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span> <span class="n">badIteration</span><span class="o">.</span><span class="na">dataValues</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;* &#39;</span> <span class="o">&lt;&lt;</span> <span class="n">badIteration</span><span class="o">.</span><span class="na">dataValues</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;\n&#39;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span> <span class="n">error</span> <span class="k">in</span> <span class="n">badIteration</span><span class="o">.</span><span class="na">errors</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;----\n&#39;</span> <span class="o">&lt;&lt;</span> <span class="n">error</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;\n----\n&#39;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> <span class="o">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">small</span><span class="o">]</span><span class="err">#</span><span class="n">generated</span> <span class="n">by</span> <span class="n">$</span><span class="o">{</span><span class="n">com</span><span class="o">.</span><span class="na">athaydes</span><span class="o">.</span><span class="na">spockframework</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">SpockReportExtension</span><span class="o">.</span><span class="na">PROJECT_URL</span><span class="o">}[</span><span class="n">Athaydes</span> <span class="n">Spock</span> <span class="n">Reports</span><span class="o">]</span><span class="err">#</span>
</span></code></pre></td></tr></table></div></figure>
<p>The result looks good :-) Now that we have the summary report and all spec reports, we can add a small section to the summary template which includes all spec reports or order to create one big report file:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;%</span> <span class="n">data</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">name</span><span class="o">,</span> <span class="n">map</span> <span class="o">-&gt;</span>
</span><span class='line'> <span class="o">%&gt;</span>
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">include:</span><span class="o">:</span><span class="n">$</span><span class="o">{</span><span class="n">name</span><span class="o">}.</span><span class="na">ad</span><span class="o">[]</span>
</span><span class='line'><span class="o">&lt;%</span> <span class="o">}</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now we only need to create a gradle task which renders it.</p>
]]></content></entry><entry><title type="html"><![CDATA[How to use the Spock-Reports-Plugin with Gradle]]></title><link href="https://rdmueller.github.io/blog/2015/03/14/how-to-use-the-spock-reports-plugin-with-gradle/"/><updated>2016-06-27T20:27:51+02:00</updated><id>/blog/2015/03/14/how-to-use-the-spock-reports-plugin-with-gradle/</id><content type="html"><![CDATA[<p>Since I experienced some problems when I tried to use the Spock-Reports-Plugin in Grails, I now tried to use it with Gradle.<!--more--></p>
<p>The basics are easy and well described on the <a href="https://github.com/renatoathaydes/spock-reports">Spock-Reports page</a> - just add the needed repository and dependency to your gradle build file:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="n">jcenter</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="n">testCompile</span> <span class="s1">&#39;com.athaydes:spock-reports:1.2.5&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>
<p>But where to place the properties file in case you want to modify some of them (for instance switch to the new template report engine)? Renato just writes that you should copy the properties <em>"to a file at <code>META-INF/services/com.athaydes.spockframework.report.IReportCreator.properties</code> relative to the classpath"</em>. Since I am a Gradle newbie, I had to do some experiments before I found out that one place where you can put it is the same as for maven: <code>src/test/resources/</code>. And <code>src/main/resources/</code> will also work.</p>
]]></content></entry><entry><title type="html"><![CDATA[Starting a new Blog]]></title><link href="https://rdmueller.github.io/blog/2015/03/03/starting-a-new-blog/"/><updated>2016-06-27T20:27:36+02:00</updated><id>/blog/2015/03/03/starting-a-new-blog/</id><content type="html"><![CDATA[<p>Just started my new blog. I've already had several blogs with more or less success, so why do I now start another? First of all because I don't what to be a ghost developer.</p>
]]></content></entry></feed>